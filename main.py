#必要なライブラリをインポート
import streamlit as st
import numpy as np
import pandas as pd


#タイトルとテキストを記入
st.title('Streamlit 基礎')
st.write('Hello World!')

#データフレームの準備
df = pd.DataFrame({
    '1列目' : [1, 2, 3, 4],
    '2列目' : [10, 20, 30, 40]
})

#動的なテーブル
st.dataframe(df)

#また、毎回ファイルを編集後に streamlit run ファイル名を実行しなくても、ファイルを保存した後に Web ページを更新するだけで反映させることができます。今後はローカルサーバーの実行と終了は適宜必要なタイミングで行ってください。dataframe メソッドは引数を設定することで、表にハイライトを設定したり縦横の長さを指定することもできます。

#引数を利用した動的テーブル
st.dataframe(df.style.highlight_max(axis=0), width=100, height=150)

#静的テーブル
#Streamlit の table メソッドを使用すると、静的なテーブルを作成することができます。先ほどの動的テーブルと違い、作成したテーブルが固定されているため、ユーザー側でテーブルを動かすことができなくなります。
st.table(df)
#それぞれ、用途に合わせて使い分けていきましょう。
#Streamlit では、これら以外にも複数のテーブル表示が用意されています。
#詳しくは公式ドキュメントを参照してください。

#チャート表示
#次に、データフレームを使用したチャートを表示してみましょう。
#チャートを表示するためのデータフレームを再度準備していきます。
df = pd.DataFrame(
    np.random.rand(10,3),
    columns=['a', 'b', 'c']
)

#Pandas の DataFrame メソッドで 10 行 3 列に乱数を生成し、列名を a , b , c としています。ご自身の Python 環境や Google Colabratory でデータフレームを確認すると、下記のように出力されます。このデータフレームを使ってチャートを作成してみましょう。

#折れ線グラフ
st.line_chart(df)

#面グラフ
st.area_chart(df)

#棒グラフ
st.bar_chart(df)

#このように、3 つのグラフが作成できます。
#Streamlit では、これら以外にも複数のチャート表示が用意されています。
#詳しくは公式ドキュメントを参照してください。

#マップをプロット
#次にマップをプロットしてみましょう。
#まずは新宿付近の緯度と経度を、データフレームで準備していきます。

#プロットする乱数をデータフレームで用意
df = pd.DataFrame(

    #乱数＋新宿の緯度と経度
    np.random.rand(100,2) / [50, 50] + [35.69, 139.70],
    columns=['lat', 'lon']
)

#作成したデータフレームがどのような値を返すのかを再度確認してみます。
#[35.69, 139.70] の部分が、新宿の緯度と経度を表します。緯度と経度は 1 ずれるだけでプロット位置が大きくずれてしまいます。今回生成した乱数は、緯度と経度に対して扱うには大きすぎるので、一度 50 で割っています。それでは、このデータフレームを使用して、マップをプロットしてみましょう。

#マップをプロット
st.map(df)

#新宿付近のマップにプロットすることができました。このように緯度と経度の情報があれば、簡単にマップにプロットをすることができます。

#画像の表示
#Visual Studio Code 上 で表示させたい画像を用意し、Pillow ライブラリを使用して画像を表示させてみます。お好きな画像を使用していただくか、下記のアヤメの画像を保存して使用して実装をすすめていきましょう。

#まずは Visual Studio Code 上に画像を用意します。main.py と同じディレクトリ内に使用する画像を用意します。まずは必要なライブラリをインポートしましょう。Pillow を使用して画像を読み込んでいきます。

#pillow
from PIL import Image

#Pillow で画像を読み込んでから、Streamlit の image メソッドを使用すると、画像を表示させることができます。use_column_width = True とすると、アプリのレイアウトに合わせて画像サイズを自動的に調整することが可能です。

#画像の読み込み
img = Image.open('Iris.jpg')
st.image(img,caption = 'Iris', use_column_width = True)

#インタラクティブなウィジェットの表示
#次は、チェックボックスやセレクトボックス、スライダーなどを用いて、インタラクティブなウィジェットの作り方を確認していきます。インタラクティブなウェジェットでは、ユーザー側が値や文字を入力することで Web ページが連動し、対応した出力を表示させることができます。

#チェックボックス
#まずは if 文と Streamlit の checkbox メソッドを使用して、チェックボックスを作成していきます。チェックボックスにチェックがされた場合に、画像が表示されるように実装してみましょう。

if st.checkbox('Show Image'):
    img = Image.open('Iris.jpg')
    st.image(img, caption='Iris', use_column_width=True)

#チェックボックスがチェックされたときに、if文の内部が実行され、画像が表示されていることが確認できます。

#セレクトボックス
#次にセレクトボックスを作成してきます。
#Streamlitのselectboxメソッドを使用します

#セレクトボックス
option = st.selectbox(
    '好きな数字を入力してください。',
    list(range(1,11))
)

'あなたの好きな数値は、' , option , 'です。'

#セレクトボックスの数字を選択すると、動的に出力を反映させることができます。

#テキスト入力による値の動的変更
#セレクトボックスと同様にテキスト入力した値を動的に変更することもできます。
#Streamlitのtext_inputメソッドを使用します。

#テキスト入力による亜大の動的変更
#text = st.text_input('あたなの好きなスポーツを教えて下さい。')
#'あなたの好きなスポーツ：　', text

#セレクトボックスと同様に動的に出力を反映させることができました。

#スライダーによる値の動的変更
#condition = st.slider('あなたの今の調子は？', 0, 100, 50)
#'コンディション: ', condition

#Streamlit では、これら以外にもインタラクティブなウィジェットが用意されています。
#詳しくは公式ドキュメントを参照してください。

#レイアウト

#レイアウトはアプリケーションのUIの改善として欠かせないものになります。Streamlitでは、簡単にレイアウトも変更することができるので、その方法を確認してみましょう。
#ここではサイトバーとexpanderメソッドを確認していきます。

#サイトバー
#まずはサイトバーを表示します。
#先ほどインタラクティブなウィジェットで作成した入力欄を、サイドバー上に表示してみましょう。
#注意
#先ほど作成したウィジェットの記述が残っているとエラーがおきます。
#st.text_inputとst.sliderの記述を削除してから、新たにコードを実行してください。

#テキスト入力による値の動的変更
text = st.sidebar.text_input('あなたの好きなスポーツを教えてください')
'あなたの好きなスポーツ：', text

#スライダーによる値の動的変更
condition = st.sidebar.slider('あなたの今日の調子は？',0, 100, 50)
'コンディション：', condition

#サイドバーにウィジェットが作成できました。
#このように、Streamlitの各メソッドの前にsidebarを記述するだけでサイドバーに表示をすることができます。

#expenderの追加
#expenderメソッドを使用すると、プルダウン表示を設定することができます

#expander
expander1 = st.expander('質問1')
expander1.write('質問１の回答')
expander2 = st.expander('質問２')
expander2.write('質問２の回答')
expander3 = st.expander('質問３')
expander3.write('質問３の回答')

#このように常に表示をする必要がないものは、expanderメソッドを使用してみるのもよいでしょう。
#Streamlitでは、これら以外にもカラムのレイアウトの変更をすることができます。
#詳しくは公式ドキュメントを参照してください。

#プログレスバーの表示
#プログレスバーは、タスクの進捗やどの程度完了したのかを可視化して表示することができます
#アプリケーションのロードに時間がかかる場合や、時間差をかけて出力結果を表示させたい場合に使用しましょう。

import time

latest_iteration = st.empty()
bar = st.progress(0)

#プログレスバーを0.1秒毎に進める
for i in range(100):
    latest_iteration.text(f'Iteration{i+1}')
    bar.progress(i+1)
    time.sleep(0.1)

'Done'

#プログレスバーの完了と同時に出力を確認できました。
#次章からはStreamlitで本格的なWebアプリケーションを実装していきましょう。